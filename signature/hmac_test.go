package signature

import (
	"testing"
)

var hmacTestCases = []struct {
	key       []byte
	data      []byte
	digest    string
	algorithm string
}{
	// Tests from US FIPS 198
	// https://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf
	// https://cs.opensource.google/go/go/+/refs/tags/go1.18.2:src/crypto/hmac/hmac_test.go
	{
		key: []byte{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
			0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
			0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
			0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
			0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		},
		algorithm: "SHA512",
		data:      []byte("Sample message for keylen<blocklen"),
		digest: "fd44c18bda0bb0a6ce0e82b031bf2818" +
			"f6539bd56ec00bdc10a8a2d730b3634de2545d639b0f2cf7" +
			"10d0692c72a1896f1f211c2b922d1a96c392e07e7ea9fedc",
	},
	{
		key: []byte{
			0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
			0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
			0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
			0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
			0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
			0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
			0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
			0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
			0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
			0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
			0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
			0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
			0xb0, 0xb1, 0xb2, 0xb3,
		},
		algorithm: "SHA1",
		data:      []byte("Sample #3"),
		digest:    "bcf41eab8bb2d802f3d05caf7cb092ecf8d1a3aa",
	},
	{
		key:       []byte("Jefe"),
		algorithm: "SHA256",
		data:      []byte("what do ya want for nothing?"),
		digest:    "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843",
	},
}

// Test hmac calculation
func TestHmac(t *testing.T) {
	for i, test := range hmacTestCases {
		digest, err := CalculateHmac([]byte(test.key), []byte(test.data), test.algorithm)
		if err != nil {
			t.Errorf("TEST %d:: Error calculating hmac: %s", i, err)
		}
		if digest != test.digest {
			t.Errorf("TEST %d:: Hmac digest mismatch: %s != %s", i, digest, test.digest)
		}
	}
}
